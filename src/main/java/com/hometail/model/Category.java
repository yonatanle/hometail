package com.hometail.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.OffsetDateTime;

/**
 * Represents a category of animals in the HomeTail platform.
 *
 * <p>Categories are used to group animals by their species (e.g., Dogs, Cats, Birds).
 * Each category can contain multiple breeds and serves as a top-level classification
 * in the animal hierarchy. The category name must be unique across the system.</p>
 *
 * <p>This entity includes audit fields (createdAt, updatedAt) to track when records
 * are created or modified, and supports soft deletion through the 'active' flag.</p>
 *
 * @see Animal
 * @see Breed
 * @since 1.0
 */
@Entity
@Table(
    name = "category",
    uniqueConstraints = @UniqueConstraint(
        name = "uk_category_name_ci",
        columnNames = {"name"}
    )
)
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Category {

    /**
     * Unique identifier for the category.
     * Automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The name of the category (e.g., "Dogs", "Cats", "Birds").
     * Must be unique across all categories and cannot be blank.
     * Maximum length is 100 characters.
     */
    @NotBlank(message = "Category name is required")
    @Size(max = 100, message = "Category name must not exceed 100 characters")
    @Column(nullable = false, unique = true, length = 100)
    private String name;

    /**
     * Indicates whether this category is active and can be used for new animals.
     * Inactive categories remain in the system for historical data but are hidden from selection.
     * Defaults to true when a new category is created.
     */
    @Column(nullable = false)
    private boolean active = true;

    /**
     * The sort order of this category when displayed in lists.
     * Lower numbers appear first. Can be null for default sorting.
     */
    @Column(name = "sort_order")
    private Integer sortOrder;

    /**
     * The date and time when this category was created in the system.
     * Automatically set to the current date and time when the category is first saved.
     */
    @Column(nullable = false, updatable = false)
    private OffsetDateTime createdAt = OffsetDateTime.now();

    /**
     * The date and time when this category was last modified.
     * Automatically updated whenever the category is saved.
     */
    @Column(nullable = false)
    private OffsetDateTime updatedAt = OffsetDateTime.now();

    /**
     * JPA lifecycle callback that runs before the entity is updated.
     * Updates the modification timestamp to the current time.
     */
    @PreUpdate
    protected void touch() {
        this.updatedAt = OffsetDateTime.now();
    }
}
