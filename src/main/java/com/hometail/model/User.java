package com.hometail.model;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * Represents a user account in the HomeTail platform.
 *
 * <p>This entity stores essential user information including authentication details,
 * contact information, and role-based access control. Each user can have one of the
 * predefined roles that determine their permissions within the system.</p>
 *
 * <p>The class uses JPA annotations for object-relational mapping and Lombok annotations
 * to reduce boilerplate code. It includes validation constraints to ensure data integrity.</p>
 *
 * @see Animal
 * @see AdoptionRequest
 * @since 1.0
 */
@Entity
@Table(name = "user")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class User {

    /**
     * Unique identifier for the user.
     * Automatically generated by the database when a new user is created.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The user's hashed password.
     * Should never be stored in plain text. Use a strong hashing algorithm
     * with a unique salt for each user.
     *
     * @see org.springframework.security.crypto.password.PasswordEncoder
     */
    @Column(nullable = false)
    private String password;
    /**
     * The user's full legal name.
     * Used for display purposes and official documentation.
     */
    @Column(nullable = false, length = 100)
    private String fullName;
    /**
     * The user's email address.
     * Must be unique across all users and is used for account verification
     * and communication.
     */
    @Column(unique = true, nullable = false, length = 100)
    private String email;
    /**
     * The user's contact phone number.
     * Used for important notifications and account recovery.
     */
    @Column(length = 20)
    private String phoneNumber;
    /**
     * The user's role in the system, which determines their permissions.
     * Defaults to "USER". Other possible values might include "ADMIN", "STAFF", etc.
     *
     * @see org.springframework.security.core.authority.SimpleGrantedAuthority
     */
    @Column(nullable = false, length = 20)
    private String role = "USER";
}
