package com.hometail.model;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDate;
import java.util.List;

/**
 * Represents an animal in the HomeTail platform.
 *
 * <p>This entity contains all the information about an animal available for adoption,
 * including its physical characteristics, description, and adoption status.</p>
 *
 * <p>The class uses JPA annotations for object-relational mapping and Lombok annotations
 * to reduce boilerplate code. It maintains relationships with other entities like
 * Category, Breed, and User.</p>
 *
 * @see Category
 * @see Breed
 * @see User
 * @see Gender
 * @see Size
 * @since 1.0
 */
@Entity
@Table(name = "animal")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Animal {

    /**
     * Unique identifier for the animal.
     * Automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The name of the animal.
     * This is a required field and should be unique for each animal.
     */
    @Column(nullable = false)
    private String name;
    /**
     * The category (species) of the animal (e.g., Dog, Cat).
     * This is a required field and cannot be null.
     */
    @ManyToOne(optional = false, fetch = FetchType.LAZY)
    @JoinColumn(name = "category_id", nullable = false)
    private Category category;

    /**
     * The specific breed of the animal (e.g., Labrador, Siamese).
     * This field is optional as some animals might be of mixed or unknown breed.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "breed_id")
    private Breed breed;

    /**
     * The gender of the animal.
     * This is a required field and cannot be null.
     *
     * @see Gender
     */
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private Gender gender;

    /**
     * The size category of the animal.
     * This is a required field and cannot be null.
     *
     * @see Size
     */
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private Size size;

    /**
     * A brief description of the animal, suitable for display in lists or cards.
     * Should be limited to a few sentences.
     */
    @Column(name = "short_description", length = 255)
    private String shortDescription;

    /**
     * A detailed description of the animal, including personality, behavior,
     * and any special needs or requirements.
     */
    @Column(name = "long_description", columnDefinition = "TEXT")
    private String longDescription;

    /**
     * Indicates whether the animal has been adopted.
     * Defaults to false when a new animal is created.
     */
    @Column(name = "is_adopted", nullable = false)
    private boolean isAdopted = false;

    /**
     * The birth date of the animal.
     * If the exact date is unknown, an approximate date can be used.
     */
    private LocalDate birthday;

    /**
     * The filename or path to the animal's profile image.
     * This should reference an image file stored in the system.
     */
    private String image;

    /**
     * The current owner of the animal.
     * This will be null for animals currently in the shelter.
     * When an animal is adopted, this field is updated with the adopting user.
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "owner_id")
    private User owner;

    /**
     * List of adoption requests associated with this animal.
     * This is a one-to-many relationship where the animal is the parent entity.
     * The list will be empty if there are no pending or past adoption requests.
     */
    @OneToMany(mappedBy = "animal", cascade = CascadeType.REMOVE, orphanRemoval = true)
    private List<AdoptionRequest> adoptionRequests;

}
