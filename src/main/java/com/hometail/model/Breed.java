package com.hometail.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.*;
import java.time.OffsetDateTime;

/**
 * Represents a breed of an animal in the HomeTail platform.
 *
 * <p>This entity is used to categorize animals into specific breeds within their categories.
 * Each breed is associated with exactly one category (e.g., Dog, Cat) and has a unique name
 * within that category. The combination of category and breed name is enforced to be unique.</p>
 *
 * <p>The class includes validation constraints to ensure data integrity and uses JPA annotations
 * for object-relational mapping. It also includes audit fields (createdAt, updatedAt) to track
 * when records are created or modified.</p>
 *
 * @see Category
 * @see Animal
 * @since 1.0
 */
@Entity
@Table(
        name = "breed",
        uniqueConstraints = @UniqueConstraint(
                name = "uk_breed_category_name_ci",
                columnNames = {"category_id", "name"}
        )
)
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class Breed {

    /**
     * Unique identifier for the breed.
     * Automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @EqualsAndHashCode.Include
    private Long id;

    /**
     * The name of the breed (e.g., "Labrador Retriever", "Siamese").
     * Must be unique within its category and cannot be blank.
     * Maximum length is 100 characters.
     */
    @NotBlank(message = "Breed name is required")
    @Size(max = 100, message = "Breed name must not exceed 100 characters")
    @Column(nullable = false, length = 100)
    private String name;

    /**
     * The category that this breed belongs to (e.g., Dog, Cat).
     * This is a required field and cannot be null.
     */
    @ManyToOne(optional = false, fetch = FetchType.LAZY)
    @JoinColumn(name = "category_id", nullable = false)
    private Category category;

    /**
     * Indicates whether this breed is active and can be used for new animals.
     * Inactive breeds remain in the system for historical data but are hidden from selection.
     * Defaults to true when a new breed is created.
     */
    @Column(nullable = false)
    private boolean active = true;

    /**
     * The sort order of this breed when displayed in lists.
     * Lower numbers appear first. Can be null for default sorting.
     */
    @Column(name = "sort_order")
    private Integer sortOrder;

    /**
     * The date and time when this breed was created in the system.
     * Automatically set to the current date and time when the breed is first saved.
     */
    @Column(nullable = false, updatable = false)
    private OffsetDateTime createdAt = OffsetDateTime.now();

    /**
     * The date and time when this breed was last modified.
     * Automatically updated whenever the breed is saved.
     */
    @Column(nullable = false)
    private OffsetDateTime updatedAt = OffsetDateTime.now();

    /**
     * JPA lifecycle callback that runs before the entity is persisted.
     * Trims whitespace from the name and sets the creation/update timestamps.
     */
    @PrePersist
    private void prePersist() {
        if (name != null) name = name.trim();
        this.createdAt = OffsetDateTime.now();
        this.updatedAt = this.createdAt;
    }

    /**
     * JPA lifecycle callback that runs before the entity is updated.
     * Trims whitespace from the name and updates the modification timestamp.
     */
    @PreUpdate
    private void preUpdate() {
        if (name != null) name = name.trim();
        this.updatedAt = OffsetDateTime.now();
    }
}
